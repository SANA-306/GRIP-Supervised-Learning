# -*- coding: utf-8 -*-
"""Sparks Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16H2VUwqvm6JrnBqu1wxtjKeil9NlWEhY

# **The Sparks Foundation**
##**Data Science and Business Analytics Internship**
###**Task 1 : Prediction using Supervised ML using Simple Linear Regression**

###**By - Sana Shaikh**
"""

# Importing all required libraries

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn import linear_model 
import seaborn as sns

# Import file
url="https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
data=pd.read_csv(url)

#Prints first 5 records
data.head()

#Prints last 5 records
data.tail()

#To know percentiles, mean, std, max, count of given dataset 
data.describe()

"""###**Full Samary of Dataframe**"""

data.info()

"""###**Data Analysis**"""

data.plot(x='Hours',y='Scores',style='o')
plt.title('Hours Vs Percentages')
plt.xlabel('Hours Studies')
plt.ylabel('Percentages Score')

"""###**Training the Dataset**"""

x = data.iloc[:,:-1].values
y = data.iloc[:,1].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=0)

from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(x_train,y_train)
print('Training is Complete')

#Plot Regression Line
line = reg.coef_*x+reg.intercept_
#Plotting for test data
plt.scatter(x,y)
plt.plot(x,line,'r')
plt.show()

"""###**Testing Data**"""

y_pred = reg.predict(x_test)
df = pd.DataFrame({'Actual':y_test,'Predict':y_pred})
df.head()

"""**Problem Statement: If student studies for 9.25 hr/day, what will be predicted score?**"""

h = 9.25
pred = reg.predict([[h]])
print("Given that student studies 9.25 hr/day, prediction of score is %.4f"%pred)

"""###**Error Determination**"""

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
print('Mean Absolute Error:',mean_absolute_error(y_test,y_pred))
print('Coefficient of Determination;',r2_score(y_test,y_pred))